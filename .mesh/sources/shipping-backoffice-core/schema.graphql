schema {
  query: Query
  mutation: Mutation
}

type Query {
  getWithdrawalsRequest(id: BigInt!): WithdrawalRequest
  searchWithdrawalRequests(id: [BigInt], seller_id: [BigInt], status: [String], site_id: [String], type: [String], version: [String], inventory_id: [String], appointment_date: [String], title: [String], query: String, shipment_type: [String], default_warehouse_id: [String], appointment_date_from: String, appointment_date_to: String, sort_by: String, offset: Int, limit: Int = 50): SearchResultsWithdrawalRequest
  getWithdrawalsRequestLocations(id: BigInt!): String
  getWithdrawalsRequestHistory(id: BigInt!): [StatusHistoryWithdrawalsRequestStatus]
  getWithdrawal(id: BigInt!): Withdrawal
  searchWithdrawals(id: [BigInt], withdrawal_request_id: [BigInt], code: [String], seller_id: [BigInt], status: [String], warehouse_id: [String], site_id: [String], inventory_id: [String], appointment_date: [String], appointment_date_from: String, appointment_date_to: String, shipment_type: [String], query: String, sort_by: String, offset: Int, limit: Int = 50): SearchResultsWithdrawal
  getWithdrawalReadyToDispatchInfo(code: String!): DispatchInfo
  getWithdrawalsContainer(id: String!): WithdrawalContainer
  searchWithdrawalContainers(id: [String], withdrawal_id: [BigInt], parcel_id: [String], status: [String], inventory_id: [String], storage_address: [String], site_id: [String], warehouse_id: [String], shipment_type: [String], tracking_id: [String], shipment_order_id: [String], sort_by: String, offset: Int, limit: Int = 50): SearchResultsWithdrawalContainer
  getWithdrawalsContainerTrackingInfo(id: String!): WithdrawalContainerTrackingInfo
  getDocuments(id: String!): ContainerDocuments
}

type WithdrawalRequest {
  appointments: [JSON]
  shipment: Shipment
  fee: Fee
  appointment: Appointment
  units: [JSON]
  title: String
  type: query_getWithdrawalsRequest_type
  version: String
  id: BigInt
  status: query_getWithdrawalsRequest_status
  default_warehouse_id: String
  sub_status: DELAYED_const
  dispatch_id: String
  withdrawal_ids: [BigInt]
  last_updated: String
  seller_id: BigInt
  site_id: String
  print_action: query_getWithdrawalsRequest_print_action
}

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Shipment {
  address: Address
  type: query_getWithdrawalsRequest_shipment_type
}

type Address {
  id: BigInt
}

"The `BigInt` scalar type represents non-fractional signed whole numeric values."
scalar BigInt

enum query_getWithdrawalsRequest_shipment_type {
  FTL
  SPD
  SHIPMENT
  DISPOSAL
  TRANSFER
}

type Fee {
  value: Float
  currency_id: String
}

type Appointment {
  date: String
  from: String
  to: String
  source: query_getWithdrawalsRequest_appointment_source
  creation_date: String
}

enum query_getWithdrawalsRequest_appointment_source {
  SELLER
  MELI
}

enum query_getWithdrawalsRequest_type {
  SWH
  MWH
}

enum query_getWithdrawalsRequest_status {
  CREATED
  UNITS_IN_PROGRESS
  UNITS_COMPLETED
  SCHEDULED
  PROCESSING
  CANCELED
  FISCAL_ERROR
  READY_TO_DISPATCH
  APPOINTMENT_EXPIRED
  ABLE_TO_DISCARD
  PARTIALLY_SHIPPED
  COMPLETED
  SHIPPED
  UNFULFILLABLE
  DISCARDED
  DELIVERED
  DELIVERED_WITH_DIFFERENCES
  NOT_DELIVERED
  CONFIRMED
}

enum DELAYED_const {
  DELAYED
}

enum query_getWithdrawalsRequest_print_action {
  PRINT
  REPRINT
  DONE
}

type SearchResultsWithdrawalRequest {
  paging: Paging
  sort: Sorter
  results: [JSON]
  applied_filters: [JSON]
  available_filters: [String]
}

type Paging {
  total: BigInt
  offset: Int
  limit: Int
}

type Sorter {
  field: String
  order: query_searchWithdrawalRequests_sort_order
}

enum query_searchWithdrawalRequests_sort_order {
  asc
  desc
}

type StatusHistoryWithdrawalsRequestStatus {
  status: query_getWithdrawalsRequestHistory_items_status
  event_date: String
}

enum query_getWithdrawalsRequestHistory_items_status {
  CREATED
  UNITS_IN_PROGRESS
  UNITS_COMPLETED
  SCHEDULED
  PROCESSING
  CANCELED
  FISCAL_ERROR
  READY_TO_DISPATCH
  APPOINTMENT_EXPIRED
  ABLE_TO_DISCARD
  PARTIALLY_SHIPPED
  COMPLETED
  SHIPPED
  UNFULFILLABLE
  DISCARDED
  DELIVERED
  DELIVERED_WITH_DIFFERENCES
  NOT_DELIVERED
  CONFIRMED
}

type Withdrawal {
  appointments: [JSON]
  code: String
  shipment: Shipment
  appointment: Appointment
  units: [JSON]
  id: BigInt
  status: query_getWithdrawal_status
  transfer_plan_id: BigInt
  sub_status: DELAYED_const
  dispatch_id: String
  last_updated: String
  date_created: String
  seller_id: BigInt
  warehouse_id: String
  site_id: String
  withdrawal_request_id: BigInt
  print_action: query_getWithdrawal_print_action
}

enum query_getWithdrawal_status {
  CREATED
  STOCK_RESERVED
  READY_TO_COLLECT
  COLLECTING
  COLLECTED
  READY_TO_DISPATCH
  APPOINTMENT_EXPIRED
  ABLE_TO_DISCARD
  DOCUMENTED
  COMPLETED
  UNFULFILLABLE
  SHIPPED
  PARTIALLY_SHIPPED
  FISCAL_ERROR
  DISCARDED
  CANCELED
  DELIVERED
  DELIVERED_WITH_DIFFERENCES
  NOT_DELIVERED
}

enum query_getWithdrawal_print_action {
  PRINT
  REPRINT
  DONE
}

type SearchResultsWithdrawal {
  paging: Paging
  sort: Sorter
  results: [JSON]
  applied_filters: [JSON]
  available_filters: [String]
}

type DispatchInfo {
  constraint: query_getWithdrawalReadyToDispatchInfo_constraint
  ready_to_dispatch: Boolean
  dispatch_channel: String
}

enum query_getWithdrawalReadyToDispatchInfo_constraint {
  PENDING_PROCESS
  PROCESSING
  PROCESSED
  CANCELLED
  FISCAL_ERROR
  DOCUMENTED
  COMPLETED
  UNFULFILLABLE
  DISCARDED
}

type WithdrawalContainer {
  shipment: ContainerShipment
  movements: [JSON]
  units: [JSON]
  id: String
  status: query_getWithdrawalsContainer_status
  dimensions: Dimensions
  withdrawal_id: BigInt
  parcel_id: String
  last_updated: String
  seller_id: BigInt
  warehouse_id: String
  site_id: String
  storage_address: String
}

type ContainerShipment {
  address: Address
  type: query_getWithdrawalsContainer_shipment_type
  tracking: [JSON]
  order_id: String
  transfer_unit_id: BigInt
  estimated_delivery_date: Delivery
  tracking_id: String
  parcel_id: String
}

enum query_getWithdrawalsContainer_shipment_type {
  FTL
  SPD
  SHIPMENT
  DISPOSAL
  TRANSFER
}

type Delivery {
  from: String
  to: String
}

enum query_getWithdrawalsContainer_status {
  CREATED
  STORED
  SHIPPED
  LOST
  DAMAGED
  TRACKED
  READY_TO_DISPATCH
  IN_TRANSFER
  TRANSFERRED
  DISCARDED
  DELIVERED
  NOT_DELIVERED
  FISCAL_ERROR
  IN_POST_OFFICE
  RETURNED_TO_WAREHOUSE
}

type Dimensions {
  length: Dimension
  width: Dimension
  weight: Dimension
  height: Dimension
}

type Dimension {
  value: Float
  measure_unit: query_getWithdrawalsContainer_dimensions_length_measure_unit
}

enum query_getWithdrawalsContainer_dimensions_length_measure_unit {
  g
  cm
}

type SearchResultsWithdrawalContainer {
  paging: Paging
  sort: Sorter
  results: [JSON]
  applied_filters: [JSON]
  available_filters: [String]
}

type WithdrawalContainerTrackingInfo {
  address: AddressDTO
  user: User
  container_id: String
  dimensions: Dimensions
  withdrawal_id: BigInt
  shipment_type: query_getWithdrawalsContainerTrackingInfo_shipment_type
  tracking_id: String
}

type AddressDTO {
  country: AddressArea
  references: String
  city: AddressArea
  phone: String
  comment: String
  id: BigInt
  state: AddressArea
  zip_code: String
  street_name: String
  street_number: String
  aditional_info: String
  address_line: String
}

type AddressArea {
  name: String
  id: String
}

type User {
  nickname: String
  id: BigInt
}

enum query_getWithdrawalsContainerTrackingInfo_shipment_type {
  FTL
  SPD
  SHIPMENT
  DISPOSAL
  TRANSFER
}

type ContainerDocuments {
  shipping_label: String
  invoice_labels: [String]
  box_id: String
}

type Mutation {
  deleteWithdrawalRequestProjection(id: BigInt!): String
  deleteWithdrawalProjection(id: BigInt!): String
  processWithdrawalRequestEventMessage(input: BigQueueMessage_Input): String
  processWithdrawalEventMessage(input: BigQueueMessage_Input): String
  processWithdrawalEventMessage_1(input: BigQueueMessage_Input): String
  deleteWithdrawalContainerProjection(id: String!): String
}

input BigQueueMessage_Input {
  msg: EventMessage_Input
}

input EventMessage_Input {
  source_id: String
  event_id: BigInt
}